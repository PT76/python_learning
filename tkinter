import tkinter as tk
from tkinter import scrolledtext
from tkinter import messagebox
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import WebBaseLoader
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import OllamaEmbeddings
import ollama

# Function to load, split, and retrieve documents
def load_and_retrieve_docs(url):
    loader = WebBaseLoader(
        web_paths=(url,),
        bs_kwargs=dict() 
    )
    docs = loader.load()
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    splits = text_splitter.split_documents(docs)
    embeddings = OllamaEmbeddings(model="mistral")
    vectorstore = Chroma.from_documents(documents=splits, embedding=embeddings)
    return vectorstore.as_retriever()

# Function to format documents
def format_docs(docs):
    return "\n\n".join(doc.page_content for doc in docs)

# Function that defines the RAG chain
def rag_chain(url, question):
    try:
        retriever = load_and_retrieve_docs(url)
        retrieved_docs = retriever.invoke(question)
        formatted_context = format_docs(retrieved_docs)
        formatted_prompt = f"Question: {question}\n\nContext: {formatted_context}"
        response = ollama.chat(model='mistral', messages=[{'role': 'user', 'content': formatted_prompt}])
        return response['message']['content']
    except Exception as e:
        return str(e)

# Tkinter GUI
def get_inputs():
    url = url_entry.get()
    question = question_entry.get("1.0", tk.END).strip()
    response = rag_chain(url, question)
    result_text.config(state=tk.NORMAL)
    result_text.delete("1.0", tk.END)
    result_text.insert(tk.END, response)
    result_text.config(state=tk.DISABLED)

def on_exit():
    if messagebox.askyesno("Exit", "Do you want to exit?"):
        root.destroy()

root = tk.Tk()
root.title("RAG Chain Question Answering")

# URL Entry
url_label = tk.Label(root, text="Enter URL:")
url_label.pack()
url_entry = tk.Entry(root, width=50)
url_entry.pack()

# Question Entry
question_label = tk.Label(root, text="Enter Question:")
question_label.pack()
question_entry = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=50, height=5)
question_entry.pack()

# Result Text
result_text = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=70, height=15)
result_text.pack()
result_text.config(state=tk.DISABLED)

# Submit Button
submit_button = tk.Button(root, text="Submit", command=get_inputs)
submit_button.pack()

# Exit Button
exit_button = tk.Button(root, text="Exit", command=on_exit)
exit_button.pack()

root.mainloop()
